# .github/workflows/docker-compose-ci.yml
name: Docker Compose CI & Deploy

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DB_NAME:             ${{ secrets.DB_NAME }}
  DB_USERNAME:         ${{ secrets.DB_USERNAME }}
  DB_PASSWORD:         ${{ secrets.DB_PASSWORD }}
  DB_PORT:             3306

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env
        run: |
          cat > .env <<EOF
          DOCKER_HUB_USERNAME=${DOCKER_HUB_USERNAME}
          DB_NAME=${DB_NAME}
          DB_USERNAME=${DB_USERNAME}
          DB_PASSWORD=${DB_PASSWORD}
          DB_PORT=${DB_PORT}
          EOF

      - name: Create SSL files
        run: |
          mkdir -p nginx/ssl
          echo "${{ secrets.SSL_CERT }}" > nginx/ssl/fullchain.pem
          echo "${{ secrets.SSL_KEY  }}" > nginx/ssl/privkey.pem

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start all services
        run: docker-compose up --build -d

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            docker-compose exec -T db mysqladmin ping -h localhost --silent && break
            sleep 2
          done

      - name: Run Django tests
        run: docker-compose run --rm test

      - name: Teardown
        if: always()
        run: docker-compose down

  deploy:
    name: Deploy to VM
    needs: build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host:     ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key:      ${{ secrets.SERVER_SSH_KEY }}
          port:     ${{ secrets.SERVER_SSH_PORT }}
          script: |
            set -e

            # 1) 서버 ~/.ssh/known_hosts에 GitHub 키 추가
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts

            # 2) 필요한 패키지(한 번만)
            sudo apt-get update
            sudo apt-get install -y docker.io docker-compose git

            # 3) 앱 디렉터리 준비
            APP_DIR="/home/${{ secrets.SERVER_USER }}/app"
            if [ ! -d "$APP_DIR" ]; then
              git clone git@github.com:MJSEC-MJU/Reagan.git "$APP_DIR"
            fi
            cd "$APP_DIR"

            # 4) 깃 동기화 (dev 브랜치)
            git fetch --all
            git checkout dev
            git reset --hard origin/dev

            # 5) SSL 파일이 CI에서 올린 nginx/ssl 에 있다고 가정
            mkdir -p nginx/ssl
            mv ~/nginx/ssl/* nginx/ssl/

            # 6) .env 파일 복사 (필요하면 CI에서 .env 를 scp로 전달)
            # cp /tmp/.env .

            # 7) 컨테이너 빌드 & 재시작
            sudo docker-compose up --build -d --remove-orphans

            # 8) 불필요 이미지 정리 (옵션)
            sudo docker image prune -f
